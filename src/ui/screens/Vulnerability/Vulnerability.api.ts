import { Vulnerability } from "./Vulnerablility.type";

const BASE_URL = 'https://devapi.boman.ai';
const VULNERABILITIES_URL = '/v2/api/task/vuln';

export const getVulnerabilities = async() => {
    const headers = new Headers({
        'Content-Type':'application/json',
        'Access-Control-Allow-Origin':'http://localhost:5173/',
        'Access-Control-Allow-Credentials': 'true'
    });
    return fetch(BASE_URL + VULNERABILITIES_URL, {mode: 'no-cors', headers, method: 'GET'})
    .then(response => {
        console.log('response1: ', response);
        return data;
    })
    // .then(response => {
    //     console.log('response2: ', response ? JSON.parse(response) : null);
    //     return response ? JSON.parse(response) : null;
    // })
    .catch(error => {
        console.error('Failed to get vulnerabilities with error :: ', error);
        return [];
    })
}


const data: Vulnerability[] = [
    {
        "_id": "4A9Cy34BTDj29HRjA",
        "vuln_name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "affected_file": "WebContent/swagger/lib/highlight.7.3.pack.js",
        "vuln_loc": "1",
        "vuln_description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "code": "",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "owasp_category": "A07:2017 - Cross-Site Scripting (XSS),A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:07.777z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "Ym9MLWebqe5pJ8WPa",
        "vuln_name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "affected_file": "WebContent/swagger/lib/highlight.7.3.pack.js",
        "vuln_loc": "1",
        "vuln_description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "owasp_category": "A07:2017 - Cross-Site Scripting (XSS),A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:07.797z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "SDaN5wNrtDsPbCX74",
        "vuln_name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "affected_file": "WebContent/util/swfobject.js",
        "vuln_loc": "4",
        "vuln_description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "owasp_category": "A07:2017 - Cross-Site Scripting (XSS),A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:07.813z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "nMc348DMxtJGkQcpe",
        "vuln_name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "affected_file": "WebContent/util/swfobject.js",
        "vuln_loc": "4",
        "vuln_description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "owasp_category": "A07:2017 - Cross-Site Scripting (XSS),A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:07.856z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "54aKrPvjzK4Pm7Gyf",
        "vuln_name": "javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration",
        "affected_file": "WebContent/swagger/swagger-ui.js",
        "vuln_loc": "1",
        "vuln_description": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-345: Insufficient Verification of Data Authenticity",
        "owasp_category": "A08:2021 - Software and Data Integrity Failures",
        "reference": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:07.888z"),
        "asvs_chapter_name": "V14 Configuration"
    },
    {
        "_id": "ks2Caj5Z57ZdTordJ",
        "vuln_name": "javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration",
        "affected_file": "WebContent/swagger/swagger-ui.js",
        "vuln_loc": "1",
        "vuln_description": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.",
        "code": "'    <li><a href=\\\"http://www.newspapersyndications.tv\\\">Analyst Reviews</a></li>'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-345: Insufficient Verification of Data Authenticity",
        "owasp_category": "A08:2021 - Software and Data Integrity Failures",
        "reference": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:07.904z"),
        "asvs_chapter_name": "V14 Configuration"
    },
    {
        "_id": "khAzQTejsB8rhcKpR",
        "vuln_name": "html.security.plaintext-http-link.plaintext-http-link",
        "affected_file": "WebContent/high_yield_investments.htm",
        "vuln_loc": "127",
        "vuln_description": "This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.",
        "code": "'        please go to <a id=\\\"_ctl0__ctl0_HyperLink7\\\" href=\\\"http://www.watchfire.com/statements/terms.aspx\\\">http://www.watchfire.com/statements/terms.aspx</a>.<br /><br />'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "HIGH",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp_category": "A03:2017 - Sensitive Data Exposure,A02:2021 - Cryptographic Failures",
        "reference": "https://cwe.mitre.org/data/definitions/319.html",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.006z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "5JgKpAudq7pXgpZ5b",
        "vuln_name": "html.security.plaintext-http-link.plaintext-http-link",
        "affected_file": "WebContent/static/inside_about.htm",
        "vuln_loc": "12",
        "vuln_description": "This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.",
        "code": "'    <li><a href=\\\"http://www.newspapersyndications.tv\\\">Analyst Reviews</a></li>'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "HIGH",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp_category": "A03:2017 - Sensitive Data Exposure,A02:2021 - Cryptographic Failures",
        "reference": "https://cwe.mitre.org/data/definitions/319.html",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.011z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "M8WgcHbBYGcpF2GWu",
        "vuln_name": "html.security.plaintext-http-link.plaintext-http-link",
        "affected_file": "WebContent/static/inside_community.htm",
        "vuln_loc": "15",
        "vuln_description": "This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.",
        "code": "'<a href=\\\"http://www.adobe.com/products/acrobat/readstep2.html\\\">Download free Adobe Reader</a>.</p>'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "HIGH",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp_category": "A03:2017 - Sensitive Data Exposure,A02:2021 - Cryptographic Failures",
        "reference": "https://cwe.mitre.org/data/definitions/319.html",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at":  new Date("2023-03-28T06:44:08.016z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "vbtfFW52hzCpbDDi5",
        "vuln_name": "html.security.plaintext-http-link.plaintext-http-link",
        "affected_file": "WebContent/static/security.htm",
        "vuln_loc": "59",
        "vuln_description": "This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.",
        "code": "'<p>For more information on home computer security, visit <a href=\\\"http://www.cert.org/\\\">http://www.cert.org/</a>.</p>'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "HIGH",
        "vuln_severity": "LOW",
        "boman_severity": "LOW",
        "cvss_base_score": 3.9,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp_category": "A03:2017 - Sensitive Data Exposure,A02:2021 - Cryptographic Failures",
        "reference": "https://cwe.mitre.org/data/definitions/319.html",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at":  new Date("2023-03-28T06:44:08.020z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "nx6NzvL2KoMrznjMw",
        "vuln_name": "java.lang.security.audit.crypto.weak-random.weak-random",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/OperationsUtil.java",
        "vuln_loc": "148",
        "vuln_description": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.",
        "code": "'\\t    new Random().nextBytes(array);'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-330: Use of Insufficiently Random Values",
        "owasp_category": "A02:2021 - Cryptographic Failures",
        "reference": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.026z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "EufbAoEWB3XXCSj8b",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "219",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\tResultSet resultSet =statement.executeQuery(\\\"SELECT COUNT(*)FROM PEOPLE WHERE USER_ID = \\'\\\"+ user +\\\"\\' AND PASSWORD=\\'\\\" + password + \\\"\\'\\\"); /* BAD - user input should always be sanitized */'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at":new Date("2023-03-28T06:44:08.030z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "rygRLn9ivhwGvNE8G",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "242",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\tResultSet resultSet =statement.executeQuery(\\\"SELECT FIRST_NAME,LAST_NAME,ROLE FROM PEOPLE WHERE USER_ID = \\'\\\"+ username +\\\"\\' \\\"); /* BAD - user input should always be sanitized */'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.047z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "uuBHGBdrmoXuCKgqD",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "276",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\tResultSet resultSet =statement.executeQuery(\\\"SELECT ACCOUNT_ID, ACCOUNT_NAME, BALANCE FROM ACCOUNTS WHERE USERID = \\'\\\"+ username +\\\"\\' \\\"); /* BAD - user input should always be sanitized */'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.053z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "C7n2gtbsMTK2ajvFx",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "403",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\t\\tresultSet = statement.executeQuery(query);'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.057z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "bGWumcZ93D2EjeWeF",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "471",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\tstatement.execute(\\\"INSERT INTO ACCOUNTS (USERID,ACCOUNT_NAME,BALANCE) VALUES (\\'\\\"+username+\\\"\\',\\'\\\"+acctType+\\\"\\', 0)\\\");'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.060z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "GGKFWJ6g2dGBXJk9m",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "482",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\tstatement.execute(\\\"INSERT INTO SPECIAL_CUSTOMERS (USER_ID,PASSWORD,FIRST_NAME,LAST_NAME,ROLE) VALUES (\\'\\\"+username+\\\"\\',\\'\\\"+password+\\\"\\', \\'\\\"+firstname+\\\"\\', \\'\\\"+lastname+\\\"\\',\\'user\\')\\\");'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.064z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "dvvmMxgRg5qyXnkq8",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "494",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\tstatement.execute(\\\"INSERT INTO PEOPLE (USER_ID,PASSWORD,FIRST_NAME,LAST_NAME,ROLE) VALUES (\\'\\\"+username+\\\"\\',\\'\\\"+password+\\\"\\', \\'\\\"+firstname+\\\"\\', \\'\\\"+lastname+\\\"\\',\\'user\\')\\\");'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at":new Date("2023-03-28T06:44:08.067z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "XEAp4KdBA5CPkyYLy",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "506",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\tstatement.execute(\\\"UPDATE PEOPLE SET PASSWORD = \\'\\\"+ password +\\\"\\' WHERE USER_ID = \\'\\\"+username+\\\"\\'\\\");'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.070z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "S8pfho6ka5Rq4gWyY",
        "vuln_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "519",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\tstatement.execute(\\\"INSERT INTO FEEDBACK (NAME,EMAIL,SUBJECT,COMMENTS) VALUES (\\'\\\"+name+\\\"\\', \\'\\\"+email+\\\"\\', \\'\\\"+subject+\\\"\\', \\'\\\"+comments+\\\"\\')\\\", Statement.RETURN_GENERATED_KEYS);'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "MEDIUM",
        "vuln_severity": "MEDIUM",
        "boman_severity": "MEDIUM",
        "cvss_base_score": 6.4,
        "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html,https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps,https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement",
        "asvs_control_id": "5.3.5 Injection",
        "asvs_control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
        "asvs_section": "V5: Validation, Sanitization and Encoding Verification Requirements",
        "asvs_version": "4",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.074z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "9dqaGaCrNHeXraNRQ",
        "vuln_name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "219",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\tResultSet resultSet =statement.executeQuery(\\\"SELECT COUNT(*)FROM PEOPLE WHERE USER_ID = \\'\\\"+ user +\\\"\\' AND PASSWORD=\\'\\\" + password + \\\"\\'\\\"); /* BAD - user input should always be sanitized */'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "HIGH",
        "boman_severity": "HIGH",
        "cvss_base_score": 8.3,
        "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.076z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "KaqD5aE2DxSahJmKm",
        "vuln_name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "242",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\tResultSet resultSet =statement.executeQuery(\\\"SELECT FIRST_NAME,LAST_NAME,ROLE FROM PEOPLE WHERE USER_ID = \\'\\\"+ username +\\\"\\' \\\"); /* BAD - user input should always be sanitized */'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "HIGH",
        "boman_severity": "HIGH",
        "cvss_base_score": 8.3,
        "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.079z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "pdstemLqAPEfaoxd2",
        "vuln_name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "276",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\tResultSet resultSet =statement.executeQuery(\\\"SELECT ACCOUNT_ID, ACCOUNT_NAME, BALANCE FROM ACCOUNTS WHERE USERID = \\'\\\"+ username +\\\"\\' \\\"); /* BAD - user input should always be sanitized */'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "HIGH",
        "boman_severity": "HIGH",
        "cvss_base_score": 8.3,
        "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.086z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    },
    {
        "_id": "cGF7QoT2CAHXAbCbn",
        "vuln_name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
        "affected_file": "src/com/ibm/security/appscan/altoromutual/util/DBUtil.java",
        "vuln_loc": "335",
        "vuln_description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "code": "'\\t\\t\\tstatement.execute(\\\"INSERT INTO TRANSACTIONS (ACCOUNTID, DATE, TYPE, AMOUNT) VALUES (\\\"+debitAccount.getAccountId()+\\\",\\'\\\"+date+\\\"\\',\\\"+((debitAccount.getAccountId() == userCC)?\\\"\\'Cash Advance\\'\\\":\\\"\\'Withdrawal\\'\\\")+\\\",\\\"+debitAmount+\\\"),\\\" +\\n\\t\\t\\t\\t\\t  \\\"(\\\"+creditAccount.getAccountId()+\\\",\\'\\\"+date+\\\"\\',\\\"+((creditAccount.getAccountId() == userCC)?\\\"\\'Payment\\'\\\":\\\"\\'Deposit\\'\\\")+\\\",\\\"+creditAmount+\\\")\\\");'",
        "tool_name": "Semgrep",
        "tool_type": "SAST",
        "vuln_confidence": "LOW",
        "vuln_severity": "HIGH",
        "boman_severity": "HIGH",
        "cvss_base_score": 8.3,
        "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L",
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "owasp_category": "A01:2017 - Injection,A03:2021 - Injection",
        "reference": "https://owasp.org/Top10/A03_2021-Injection",
        "customer_status": 0,
        "asvs_user_operation": 0,
        "created_at": new Date("2023-03-28T06:44:08.090z"),
        "asvs_chapter_name": "V5 Validation, Sanitization and Encoding"
    }
]