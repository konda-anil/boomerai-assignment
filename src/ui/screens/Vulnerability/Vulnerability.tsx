import React, { useState } from "react";
import { SeverityLevel, Vulnerability } from "./Vulnerablility.type";
import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Box,
  Button,
  Checkbox,
  FormControlLabel,
  FormGroup,
  Paper,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Typography,
} from "@mui/material";
import { VulnerabilityContainer } from "./styles";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFilter, faSort } from "@fortawesome/free-solid-svg-icons";
import { getVulnerabilities } from "./Vulnerability.api";
import VulnerabilityListComponent from "./VulnerabilityList";
import {
  FilterPanels,
  SeverityTypeFilter,
  VulnerabilityTypeFilter,
} from "./Constants";

const VulnerabilityComponent = () => {
  const [open, setOpen] = useState(false);
  const path = ["Apps", "azpython", "Scans"];
  const [vulnerabilities, setVulnerabilities] = useState<
    Vulnerability[] | null
  >();
  const [tab, setTab] = React.useState("vulnerabilities");
  const [panel, setPanel] = React.useState<boolean[]>(FilterPanels);

  const handleTabChange = (event: React.SyntheticEvent, newValue: string) => {
    setTab(newValue);
  };

  const handleFilterExpansion =
    (index: number) => (event: React.SyntheticEvent, newExpanded: boolean) => {
      const newMap = Object.assign({}, panel);
      newMap[index] = newExpanded;
      setPanel(newMap);
    };

  if (!vulnerabilities) {
    getVulnerabilities().then((response) => {
      console.log("res::", response);
      setVulnerabilities(response);
    });
  }

  const groupVulnerabilities = (vuls: Vulnerability[]): Vulnerability[][] => {
    const vMap: Map<string, Vulnerability[]> = new Map();
    vuls.forEach((vul) => {
      if (vMap.get(vul.vuln_name)) {
        vMap.set(vul.vuln_name, [...(vMap.get(vul.vuln_name) ?? []), vul]);
      } else {
        vMap.set(vul.vuln_name, [vul]);
      }
    });
    const vulGroups = [];
    for (const value of vMap.values()) {
      vulGroups.push(value);
    }
    return vulGroups;
  };

  return (
    <VulnerabilityContainer>
      <Box sx={{ width: "100%" }}>
        <Tabs
          value={tab}
          onChange={handleTabChange}
          textColor="secondary"
          indicatorColor="secondary"
          aria-label="secondary tabs example"
        >
          <Tab value="overview" label="Overview" />
          <Tab value="vulnerabilities" label="Vulnerabilities" />
          <Tab value="fixes" label="Fixes" />
          <Tab value="dependencies" label="Dependencies" />
          <Tab value="settings" label="Settings" />
        </Tabs>
      </Box>
      <div className="container">
        { tab == 'vulnerabilities' ?
          <div className="vul-container">
            <div className="filters">
              <Button variant="outlined" className="filter-button">
                <FontAwesomeIcon icon={faFilter} /> Filters
              </Button>
              <div>
                <Accordion
                  expanded={panel[0]}
                  onChange={handleFilterExpansion(0)}
                >
                  <AccordionSummary
                    aria-controls="panel1d-content"
                    id="panel1d-header"
                    className="accordion-content"
                  >
                    <Typography>TYPE</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <FormGroup>
                      {VulnerabilityTypeFilter.map((filterItem) => (
                        <FormControlLabel
                          value={filterItem.value}
                          control={
                            <Checkbox
                              defaultChecked={filterItem.value == "all"}
                            />
                          }
                          label={filterItem.label}
                          key={filterItem.value}
                        />
                      ))}
                    </FormGroup>
                  </AccordionDetails>
                </Accordion>
                <Accordion
                  expanded={panel[1]}
                  onChange={handleFilterExpansion(1)}
                >
                  <AccordionSummary
                    aria-controls="panel2d-content"
                    id="panel2d-header"
                    className="accordion-content"
                  >
                    <Typography>SEVERITY</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <FormGroup>
                      {SeverityTypeFilter.map((filterItem) => (
                        <FormControlLabel
                          value={filterItem.value}
                          control={
                            <Checkbox
                              defaultChecked={filterItem.value == "all"}
                            />
                          }
                          label={filterItem.label}
                          key={filterItem.value}
                        />
                      ))}
                    </FormGroup>
                  </AccordionDetails>
                </Accordion>
              </div>
            </div>
            <div className="vuls">
              {vulnerabilities ? (
                <VulnerabilityContainer>
                  <Paper className="table-container">
                    <TableContainer sx={{ maxHeight: 550 }}>
                      <Table
                        stickyHeader
                        aria-label="sticky table"
                        className="vul-table"
                      >
                        <TableHead className="table-head">
                          <TableRow
                            style={{
                              backgroundColor: "var(--background-color)",
                            }}
                          >
                            <TableCell align="left" colSpan={2}>
                              Application Name <FontAwesomeIcon icon={faSort} />
                            </TableCell>
                            <TableCell align="left">
                              Progess <FontAwesomeIcon icon={faSort} />
                            </TableCell>
                            <TableCell align="left">
                              Severity <FontAwesomeIcon icon={faSort} />
                            </TableCell>
                            <TableCell align="left">
                              CVSS <FontAwesomeIcon icon={faSort} />
                            </TableCell>
                            <TableCell align="left">
                              Tested <FontAwesomeIcon icon={faSort} />
                            </TableCell>
                            <TableCell align="right">
                              Action <FontAwesomeIcon icon={faSort} />
                            </TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody className="table-body">
                          {groupVulnerabilities(vulnerabilities).map((vul) => (
                            <VulnerabilityListComponent
                              vulGroup={vul}
                              key={vul[0].vuln_name}
                            />
                          ))}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Paper>
                </VulnerabilityContainer>
              ) : (
                <h1>Loading...</h1>
              )}
            </div>
          </div>
        : <div>WIP</div>}
      </div>
    </VulnerabilityContainer>
  );
};

export default VulnerabilityComponent;
